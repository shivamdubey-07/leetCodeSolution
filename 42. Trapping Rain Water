class Solution {
    public int trap(int[] height) {

        // int height[] = {0,1,0,2,1,0,1,3,2,1,2,1};
         int n=height.length;

        int LL[]=new int[n];
        int RL[] =new int[n];
        int h[]=new int[n];


        Stack<Integer> stack=new Stack<>();

        for(int i=0;i<n;i++){

            while(!stack.isEmpty() && height[i]>stack.peek()){
                stack.pop();


            }

            if(stack.isEmpty()){
                stack.push(height[i]);
                LL[i]=0;
            }
            else{

                LL[i]=stack.peek();
             
                
            }


        }
        for(int i=0;i<n;i++){
           System.out.print(LL[i]);
            
        }
         System.out.println();
   



    stack.clear();

   //---------------------------------------------------------------





       for(int i=n-1;i>=0;i--){

            while(!stack.isEmpty() && height[i]>=stack.peek()){
                stack.pop();


            }

            if(stack.isEmpty()){
                stack.push(height[i]);
                RL[i]=0;
            }
            else{

                RL[i]=stack.peek();
             
                
            }


        }
        for(int i=0;i<n;i++){
             System.out.print(RL[i]);
        }
         System.out.println();
   
   //-----------------------------------------------------



   for(int i=0;i<n;i++){
       h[i]=(Math.min(LL[i],RL[i])-height[i]);
   System.out.print(h[i]);

   }


int sum=0;
for(int num:h){
    if(num>0){
        sum+=num;
    }
}
 
return sum;
        
       

    }
}
